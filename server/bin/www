#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.SSL_USE === 'Y' ? normalizePort(process.env.SSL_PORT || '3011') : normalizePort(process.env.PORT || '3010');
app.set('port', port);

/**
 * Create HTTP server.
 */

const sslOption = process.env.SSL_USE === 'Y' ? {
    key : fs.readFileSync(process.env.SSL_KEY_PATH),
    cert : fs.readFileSync(process.env.SSL_CERT_PATH),
} : undefined;

var server = sslOption ? https.createServer(sslOption, app) : http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log("Server On Port : " + port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Oracle Db Connection
 */
var oracledb    = require('oracledb');
const { fstat } = require('fs');
oracledb.connectionClass = process.env.ORA_CONNECT_CLASS,
oracledb.createPool({
    user:             process.env.ORA_USER,
    password:         process.env.ORA_PASSWD,
    connectString:    process.env.ORA_CONNECT_STRING,
    poolMax:          parseInt(process.env.ORA_POOL_MAX),
    poolMin:          parseInt(process.env.ORA_POOL_MIN),
    poolIncrement:    parseInt(process.env.ORA_POOL_INCREMET)
    // poolTimeout:      4
}, function(err, pool) {
    if (err) {
      console.log("ERROR: ", new Date(), ": createPool() callback: " + err.message);
      return;
    }

    require('../libs/oracledb.js')(pool);
});